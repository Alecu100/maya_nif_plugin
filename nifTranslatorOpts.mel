//	Description:
//		This script posts the LEP file translator options.
//		The optionsString is of the form:
//			varName1=value1;varName2=value2;...
//		for the LEP translator, there is only one option named "t",
//		which can have 2 value.  If it is "1" (or true), then on writing
//		Dag node type names are written, otherwise, it is "0" and type
//		names are not written.
//
//	Parameters:
//		$parent	- the elf parent layout for this options layout. It is
//					always a scrollLayout.
//		$action	- the action that is to be performed with this invokation
//					of this proc. Valid options are:
//						"query" - construct the options string and pass it
//									to the resultCallback.
//						"post"	- post all the elf controls.
//		$initialSettings - the current options string in effect at the
//						   time this script is invoked.
//		$resultCallback	-
//				This is the proc to be called with the result string. 
//				resultCallback ( string $optionsString )
//
//	Returns:
//		1 if successfull.
//		0 otherwise.
//
global proc int nifTranslatorOpts ( string $parent,
									string $action,
									string $initialSettings,
									string $resultCallback )
{
	int		$bResult;
	string	$currentOptions;
	string	$optionList[];
	string	$optionBreakDown[];
	int		$index;
	
	$defaultPath = "C:/Program Files/Bethesda Softworks/Morrowind/Data Files/Textures";
	
	if ($action == "post") {
		setParent $parent;
		rowLayout -numberOfColumns 1;
			text -label "Texture Source Directory:";
		setParent $parent;
		rowLayout -numberOfColumns 2
					 -columnWidth2 400 50
					 -columnAttach2 "both" "left";
			textField -editable true 
						 -text $defaultPath
						 nifTxPath;
			button -label "Browse"
					 -command "fileBrowser( \"onOk\", \"\", \"\", 4 )";
			   
		// Now set to current settings.
		$currentOptions = $initialSettings;
		if (size($currentOptions) > 0) {
			tokenize($currentOptions, ";", $optionList);
			for ($index = 0; $index < size($optionList); $index++) {
				tokenize($optionList[$index], "=", $optionBreakDown);
				if ($optionBreakDown[0] == "texturePath") {
					textField -edit -text $optionBreakDown[1] nifTxPath;
				}
			}
		}
		$bResult = 1;
	
	} else if ($action == "query") {
		// Set verbose option
		string $texturePath = `textField -query -text nifTxPath`;
		if ($texturePath != "") {
			$currentOptions = $currentOptions + "texturePath=" + $texturePath;
		}
		else {
			//Use Default path
			$currentOptions = $currentOptions + "texturePath=" + $defaultPath;
		}
		eval($resultCallback+" \""+$currentOptions+"\"");
		$bResult = 1;
	} else {
		$bResult = 0;
	}
	
	return $bResult;
}

// This procedure is called when the 'Open' button of the dialog is clicked.
// The procedure recieves the name of the file and it's extension
global proc int onOk(string $dirpath, string $type) {
	textField -edit -text $dirpath nifTxPath;
	return true;
}
