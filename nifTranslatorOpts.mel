//	Description:
//		This script posts the LEP file translator options.
//		The optionsString is of the form:
//			varName1=value1;varName2=value2;...
//		for the LEP translator, there is only one option named "t",
//		which can have 2 value.  If it is "1" (or true), then on writing
//		Dag node type names are written, otherwise, it is "0" and type
//		names are not written.
//
//	Parameters:
//		$parent	- the elf parent layout for this options layout. It is
//					always a scrollLayout.
//		$action	- the action that is to be performed with this invokation
//					of this proc. Valid options are:
//						"query" - construct the options string and pass it
//									to the resultCallback.
//						"post"	- post all the elf controls.
//		$initialSettings - the current options string in effect at the
//						   time this script is invoked.
//		$resultCallback	-
//				This is the proc to be called with the result string. 
//				resultCallback ( string $optionsString )
//
//	Returns:
//		1 if successfull.
//		0 otherwise.
//
global proc int nifTranslatorOpts ( string $parent,
				    string $action,
				    string $initialSettings,
				    string $resultCallback )
{
	int $bResult;
	string $currentOptions;
	string $optionList[];
	string $optionBreakDown[];
	int $index;
	
	string $defaultPath = "C:/Program Files/Bethesda Softworks/Morrowind/Data Files/Textures";
	string $defaultVersion = "4.0.0.2";
	string $defaultUserVersion = "0";
	string $defaultBonesPerPart = "0";
	string $defaultJointMatch = "Bip";
	
	if ($action == "post") {
		setParent $parent;
		frameLayout -label "Common" -marginWidth 20 -marginHeight 5 -borderStyle "etchedIn" -collapsable true;
			columnLayout commonColumnLayout;
				rowLayout -numberOfColumns 1;
					text -label "Texture Source Directory:";
				setParent commonColumnLayout;
				rowLayout -numberOfColumns 2
						  -columnWidth2 300 50
						  -columnAttach2 "both" "left";
					  textField -editable true 
								-text $defaultPath
								-annotation "This is the directory that the plug-in will look for textures in."
								nifTxPath;
					button -label "Browse"
						   -command "fileBrowser( \"onOk\", \"\", \"\", 4 )";
				setParent commonColumnLayout;
				textScrollList -width 300 -height 300
				               -allowMultiSelection  1
							   -append "Test1"
							   -append "Test2"
							   nifDirList;
				checkBox -label "Use Name Mangling to Preserve Original Names" 
						  -value 1
						  -annotation "Preserves names which are invalid in Maya names using character code numbers for re-export."
						  useNameManglingCk;
				setParent $parent;
		frameLayout -label "Import" -marginWidth 20 -marginHeight 5 -borderStyle "etchedIn" -collapsable true;
			columnLayout importColumnLayout;
				checkBox -label "Attempt to Find Original Bind Pose" 
					      -value 1
						  -annotation "Attempts to extract the original position the NIF file was bound in rather than its current position."
						  impBindPoseCk;
				checkBox -label "Try to Use Original Normals" 
					      -value 0
						  -annotation "Attepts to import the normals from the NIF file as user normals."
						  impNormalsCk;
				checkBox -label "Ignore Ambient Color" 
					      -value 0
						  -annotation "Uses the default ambient color instead of what is in the NIF file; usually white."
						  impNoAmbientCk;
				checkBox -label "Combine New Skins with Existing Skeleton" 
					      -value 1
						  -annotation "Tries to bind newly imported skin files to an already imported skeleton.  Only works for identical skeletons."
						  impSkelCombCk;
				rowLayout -numberOfColumns 3
					  -columnWidth3 90 50 120
					  -columnAttach3 "both" "both" "both";
					  text -label "Import nodes with";
					  textField -editable true
					  			-text $defaultJointMatch
								-annotation "NIF files do not mark their joints, so this provides a method to force known bones to import."
								impJointMatchTx;
					  text -label "  in their name as joints.";
				setParent importColumnLayout;
				
		setParent $parent;
		frameLayout -label "Export" -marginWidth 20 -marginHeight 5 -borderStyle "etchedIn" -collapsable true;
			columnLayout exportColumnLayout;
			rowLayout -numberOfColumns 2
					  -columnWidth2 120 70
					  -columnAttach2 "both" "both";
					  text -label "NIF Version:";
					  textField -editable true
								-text $defaultVersion
								-annotation "The NIF file version to export.  Examples - Morrowind: 4.0.0.2  CivIV: 20.0.0.4  Oblivion: 20.0.0.5"
								nifVersion;
			setParent exportColumnLayout;
			rowLayout -numberOfColumns 2
					  -columnWidth2 120 70
					  -columnAttach2 "both" "both";
					  text -label "Game Specific Version:";
					  textField -editable true
								-text $defaultUserVersion
								-annotation "Optional game-specific version number extention.  Oblivion: 10 or 11  All Others: 0"
								expUserVersionTx;
			setParent exportColumnLayout;
			
			checkBox -label "Export White Ambient if Texture is Present" 
					      -value 1
						  -annotation "Allows you to keep your ambient colors looking nice in Maya and convert them to white on export."
						  expWhiteAmbientCk;
			checkBox -label "Arrange Triangles in Strips" 
					      -value 1
						  -annotation "Exports NiTriStrips instead of NiTriShapes.  May cause problems in Morrowind CS."
						  expTriStripsCk;
			checkBox -label "Generate Oblivion Tangent Space Data" 
					      -value 0
						  -annotation "Check this option if you are exporting for Oblivion.  Otherwise it will just inflate your NIF file."
						  expTanSpaceCk;
			setParent exportColumnLayout;
			rowLayout -numberOfColumns 2
					  -columnWidth2 220 50
					  -columnAttach2 "both" "both";
					  text -label "Maximum Number of Bones per Skin Partition:";
					  textField -editable true
						  -text $defaultBonesPerPart
						  -annotation "CivIV No Shader: 4  CivIV FX Shader: 16  Oblivion: 20  Morrowind: 0"
						  expPartBonesTx;
			setParent exportColumnLayout;
			
		setParent $parent;
							
		// Now set to current settings.
		$currentOptions = $initialSettings;
		if (size($currentOptions) > 0) {
			tokenize($currentOptions, ";", $optionList);
			for ($index = 0; $index < size($optionList); $index++) {
				tokenize($optionList[$index], "=", $optionBreakDown);
				if ($optionBreakDown[0] == "texturePath") {
					textField -edit -text $optionBreakDown[1] nifTxPath;
				}
				if ($optionBreakDown[0] == "exportVersion") {
					textField -edit -text $optionBreakDown[1] nifVersion;
				}
				if ($optionBreakDown[0] == "exportUserVersion") {
					textField -edit -text $optionBreakDown[1] expUserVersionTx;
				}
				if ($optionBreakDown[0] == "importBindPose") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true impBindPoseCk;
					} else {
						checkBox -edit -value false impBindPoseCk;
					}
				}
				if ($optionBreakDown[0] == "importNormals") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true impNormalsCk;
					} else {
						checkBox -edit -value false impNormalsCk;
					}
				}
				if ($optionBreakDown[0] == "importNoAmbient") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true impNoAmbientCk;
					} else {
						checkBox -edit -value false impNoAmbientCk;
					}
				}
				if ($optionBreakDown[0] == "exportWhiteAmbient") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true expWhiteAmbientCk;
					} else {
						checkBox -edit -value false expWhiteAmbientCk;
					}
				}
				if ($optionBreakDown[0] == "exportTriStrips") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true expTriStripsCk;
					} else {
						checkBox -edit -value false expTriStripsCk;
					}
				}
				if ($optionBreakDown[0] == "exportTanSpace") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true expTanSpaceCk;
					} else {
						checkBox -edit -value false expTanSpaceCk;
					}
				}
				if ($optionBreakDown[0] == "importSkelComb") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true impSkelCombCk;
					} else {
						checkBox -edit -value false impSkelCombCk;
					}
				}
				if ($optionBreakDown[0] == "exportPartBones") {
					textField -edit -text $optionBreakDown[1] expPartBonesTx;
				}
				if ($optionBreakDown[0] == "importJointMatch") {
					textField -edit -text $optionBreakDown[1] impJointMatchTx;
				}
				if ($optionBreakDown[0] == "useNameMangling") {
					if ($optionBreakDown[1] == "1" ) {
						checkBox -edit -value true useNameManglingCk;
					} else {
						checkBox -edit -value false useNameManglingCk;
					}
				}
			}
		}
		$bResult = 1;
	
	} else if ($action == "query") {
		// Set verbose option
		string $texturePath = `textField -query -text nifTxPath`;
		if ($texturePath != "") {
			$currentOptions = $currentOptions + "texturePath=" + $texturePath + ";";
		} else {
			//Use Default path
			$currentOptions = $currentOptions + "texturePath=" + $defaultPath + ";";
		}
		
		string $version = `textField -query -text nifVersion`;
		if ($version != "") {
			$currentOptions = $currentOptions + "exportVersion=" + $version + ";";
		} else {
			//Use Default version
			$currentOptions = $currentOptions + "exportVersion=" + $defaultVersion + ";";
		}
		
		string $userVersion = `textField -query -text expUserVersionTx`;
		if ($version != "") {
			$currentOptions = $currentOptions + "exportUserVersion=" + $userVersion + ";";
		} else {
			//Use Default user version
			$currentOptions = $currentOptions + "exportUserVersion=" + $defaultUserVersion + ";";
		}
		
		int $ckVal;
		
		$ckVal = `checkBox -query -value impBindPoseCk`;
		$currentOptions = $currentOptions + "importBindPose=" + $ckVal + ";";
		
		$ckVal = `checkBox -query -value impNormalsCk`;
		$currentOptions = $currentOptions + "importNormals=" + $ckVal + ";";
		
		$ckVal = `checkBox -query -value impNoAmbientCk`;
		$currentOptions = $currentOptions + "importNoAmbient=" + $ckVal + ";";
		
		$ckVal = `checkBox -query -value expWhiteAmbientCk`;
		$currentOptions = $currentOptions + "exportWhiteAmbient=" + $ckVal + ";";
		
		$ckVal = `checkBox -query -value expTriStripsCk`;
		$currentOptions = $currentOptions + "exportTriStrips=" + $ckVal + ";";
		
		$ckVal = `checkBox -query -value expTanSpaceCk`;
		$currentOptions = $currentOptions + "exportTanSpace=" + $ckVal + ";";
		
		$ckVal = `checkBox -query -value impSkelCombCk`;
		$currentOptions = $currentOptions + "importSkelComb=" + $ckVal + ";";
		
		string $partBones = `textField -query -text expPartBonesTx`;
		$currentOptions = $currentOptions + "exportPartBones=" + $partBones + ";";
		
		string $jointMatch = `textField -query -text impJointMatchTx`;
		$currentOptions = $currentOptions + "importJointMatch=" + $jointMatch + ";";
		
		$ckVal = `checkBox -query -value useNameManglingCk`;
		$currentOptions = $currentOptions + "useNameMangling=" + $ckVal + ";";
		
		eval($resultCallback+" \""+$currentOptions+"\"");
		$bResult = 1;
	} else {
		$bResult = 0;
	}
	
	return $bResult;
}

// This procedure is called when the 'Open' button of the dialog is clicked.
// The procedure recieves the name of the file and it's extension
global proc int onOk(string $dirpath, string $type) {
	textField -edit -text $dirpath nifTxPath;
	return true;
}
