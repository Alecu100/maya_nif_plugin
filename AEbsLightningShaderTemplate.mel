global string $nifShaderFlags1Attr;
global string $nifShaderFlags2Attr;

global string $startingDirectory;

global string $txtTextureSlot2;
global string $txtTextureSlot2Attr;

global string $txtTextureSlot3;
global string $txtTextureSlot3Attr;

global string $txtTextureSlot4;
global string $txtTextureSlot4Attr;

global string $txtTextureSlot5;
global string $txtTextureSlot5Attr;

global string $txtTextureSlot6;
global string $txtTextureSlot6Attr;

global string $txtTextureSlot7;
global string $txtTextureSlot7Attr;

global string $txtTextureSlot8;
global string $txtTextureSlot8Attr;

global string $txtTextureSlot8;
global string $txtTextureSlot8Attr;

global string $optShaderType;
global string $optShaderTypeAttr;


global proc AEbsLightningShaderTemplate(string $nodeName) {
	global string $startingDirectory;

	editorTemplate -suppress "input";
	editorTemplate -suppress "caching";
	editorTemplate -suppress "nodeState";
	editorTemplate -suppress "message";
	editorTemplate -suppress "shaderType";
	editorTemplate -suppress "shaderFlags1";
	editorTemplate -suppress "shaderFlags2";

	editorTemplate -beginScrollLayout;
		editorTemplate -addControl "targetShader";
		editorTemplate -addControl "targetShape";
		editorTemplate -callCustom  "ShaderTypeNew" "ShaderTypeReplace" "shaderType";

		editorTemplate -beginLayout "Additional Textures";
		    editorTemplate -callCustom  "TextureSlot2New" "TextureSlot2Replace" "textureSlot2";
		    editorTemplate -callCustom  "TextureSlot3New" "TextureSlot3Replace" "textureSlot3";
		    editorTemplate -callCustom  "TextureSlot4New" "TextureSlot4Replace" "textureSlot4";
		    editorTemplate -callCustom  "TextureSlot5New" "TextureSlot5Replace" "textureSlot5";
		    editorTemplate -callCustom  "TextureSlot6New" "TextureSlot6Replace" "textureSlot6";
		    editorTemplate -callCustom  "TextureSlot7New" "TextureSlot7Replace" "textureSlot7";
		    editorTemplate -callCustom  "TextureSlot8New" "TextureSlot8Replace" "textureSlot8";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Shader Flags1";
			editorTemplate -callCustom "shaderFlags1New" "shaderFlags1Replace"
						   "shaderFlags1";			   	
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Shader Flags2";
			editorTemplate -callCustom "nifShaderFlags2New" "nifShaderFlags2Replace"
						   "shaderFlags2";	
		editorTemplate -endLayout;

		editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;

	$startingDirectory = "";
}

global proc ShaderTypeNew(string $attributeName) {
	global string $optShaderType;
	global string $optShaderTypeAttr;

	$optShaderTypeAttr = $attributeName;

	rowLayout -numberOfColumns 2 -adjustableColumn 2;
	          text "Shader Type";
			  $optShaderType = `optionMenu -changeCommand optShaderTypeChanged`;
					     menuItem -label "DEFAULT";
						 menuItem -label "ENVIRONMENT_MAP";
						 menuItem -label "GLOW_SHADER";
						 menuItem -label "HEIGHTMAP";
						 menuItem -label "FACE_TINT";
						 menuItem -label "SKIN_TINT";
						 menuItem -label "HAIR_TINT";
						 menuItem -label "PARALLAX_OCC_MATERIAL";
						 menuItem -label "WORLD_MULTITEXTURE";
						 menuItem -label "WORLDMAP1";
						 menuItem -label "UNKNOWN_10";
						 menuItem -label "MULTILAYER_PARALLAX";
						 menuItem -label "UNKNOWN_12";
						 menuItem -label "WORLDMAP2";
						 menuItem -label "SPARKLE_SNOW";
						 menuItem -label "WORLDMAP3";
						 menuItem -label "EYE_ENVMAP";
						 menuItem -label "UNKNOWN_17";
						 menuItem -label "WORLDMAP4";
						 menuItem -label "WORLD_LOD_MULTITEXTURE";

	string $shaderType = `getAttr $attributeName`;
	optionMenu -edit -value $shaderType $optShaderType;
}

global proc optShaderTypeChanged() {
	global string $optShaderType;
	global string $optShaderTypeAttr;


	string $shaderType = `optionMenu -query -value $optShaderType`;
	setAttr -type "string" $optShaderTypeAttr $shaderType;
}

global proc ShaderTypeReplace(string $attributeName) {
	global string $optShaderType;
	global string $optShaderTypeAttr;

	$optShaderTypeAttr = $attributeName;

	string $shaderType = `getAttr $attributeName`;
	optionMenu -edit -value $shaderType $optShaderType;
}


global proc TextureSlot2New(string $attributeName) {
	global string $txtTextureSlot2;
	global string $txtTextureSlot2Attr;

	$txtTextureSlot2Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot2";
			  $txtTextureSlot2 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot2NewOpen";

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot2;
}

global proc TextureSlot2NewOpen(){
	global string $txtTextureSlot2;
	global string $txtTextureSlot2Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot2Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot2;
	}
}

global proc TextureSlot2Replace(string $attributeName) {
	global string $txtTextureSlot2;
	global string $txtTextureSlot2Attr;

	$txtTextureSlot2Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot2;
}




global proc TextureSlot3New(string $attributeName) {
	global string $txtTextureSlot3;
	global string $txtTextureSlot3ttr;

	$txtTextureSlot3Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot3";
			  $txtTextureSlot3 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot3NewOpen";

    string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot3;
}

global proc TextureSlot3NewOpen(){
	global string $txtTextureSlot3;
	global string $txtTextureSlot3Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot3Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot3;
	}
}

global proc TextureSlot3Replace(string $attributeName) {
	global string $txtTextureSlot3;
	global string $txtTextureSlot3Attr;

	$txtTextureSlot3Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot3;
}





global proc TextureSlot4New(string $attributeName) {
	global string $txtTextureSlot4;
	global string $txtTextureSlot4Attr;

	$txtTextureSlot4Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot4";
			  $txtTextureSlot4 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot4NewOpen";

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot4;
}

global proc TextureSlot4NewOpen(){
	global string $txtTextureSlot4;
	global string $txtTextureSlot4Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot4Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot4;
	}
}

global proc TextureSlot4Replace(string $attributeName) {
	global string $txtTextureSlot4;
	global string $txtTextureSlot4Attr;

	$txtTextureSlot4Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot4;
}





global proc TextureSlot5New(string $attributeName) {
	global string $txtTextureSlot5;
	global string $txtTextureSlot5Attr;

	$txtTextureSlot5Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot5";
			  $txtTextureSlot5 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot5NewOpen";

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot5;
}

global proc TextureSlot5NewOpen(){
	global string $txtTextureSlot5;
	global string $txtTextureSlot5Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot5Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot5;
	}
}

global proc TextureSlot5Replace(string $attributeName) {
	global string $txtTextureSlot5;
	global string $txtTextureSlot5Attr;

	$txtTextureSlot5Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot5;
}








global proc TextureSlot6New(string $attributeName) {
	global string $txtTextureSlot6;
	global string $txtTextureSlot6Attr;

	$txtTextureSlot6Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot6";
			  $txtTextureSlot6 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot6NewOpen";

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot6;
}

global proc TextureSlot6NewOpen(){
	global string $txtTextureSlot6;
	global string $txtTextureSlot6Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot6Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot6;
	}
}

global proc TextureSlot6Replace(string $attributeName) {
	global string $txtTextureSlot6;
	global string $txtTextureSlot6Attr;

	$txtTextureSlot6Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot6;
}





global proc TextureSlot7New(string $attributeName) {
	global string $txtTextureSlot7;
	global string $txtTextureSlot7Attr;

	$txtTextureSlot7Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot7";
			  $txtTextureSlot7 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot7NewOpen";

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot7;
}

global proc TextureSlot7NewOpen(){
	global string $txtTextureSlot7;
	global string $txtTextureSlot7Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot7Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot7;
	}
}

global proc TextureSlot7Replace(string $attributeName) {
	global string $txtTextureSlot7;
	global string $txtTextureSlot7Attr;

	$txtTextureSlot7Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot7;
}






global proc TextureSlot8New(string $attributeName) {
	global string $txtTextureSlot8;
	global string $txtTextureSlot8Attr;

	$txtTextureSlot8Attr = $attributeName;

	rowLayout -numberOfColumns 3 -adjustableColumn 2;
			  text -label "Texture Slot8";
			  $txtTextureSlot8 = `textField  -editable false`;
			  button -label "Open" -command "TextureSlot8NewOpen";

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot8;
}

global proc TextureSlot8NewOpen(){
	global string $txtTextureSlot8;
	global string $txtTextureSlot8Attr;

	string $basicFilter = "*.dds";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 2 -fileMode 1`;

	
	if (size($result) > 0) {
		setAttr -type "string" $txtTextureSlot8Attr $result[0];
		textField -edit -text $result[0] $txtTextureSlot8;
	}
}

global proc TextureSlot8Replace(string $attributeName) {
	global string $txtTextureSlot8;
	global string $txtTextureSlot8Attr;

	$txtTextureSlot8Attr = $attributeName;

	string $textureFile = `getAttr $attributeName`;
	textField -edit -text $textureFile $txtTextureSlot8;
}










global proc shaderFlags1New(string $attributeName) {
	global string $nifShaderFlags1Attr;

	$nifShaderFlags1Attr = $attributeName;
	string $flags[] = `getAttr $attributeName`;

	textScrollList -height 100
	               -width 300
				   nifShaderFlags1TxLs;
	for($i = 0; $i < size($flags); $i++) {
		textScrollList -edit -append $flags[$i] nifShaderFlags1TxLs;
	}

	rowLayout -numberOfColumns 4
			  -columnWidth4 220 90 90 120
			  -columnAttach4 "both" "both" "both" "both";
			  optionMenu -label "Shader Flag:"
			             nifShaderFlags1OpMen;
						 menuItem -label "SLSF1_SPECULAR";
						 menuItem -label "SLSF1_SKINNED";
						 menuItem -label "SLSF1_TEMP_REFRACTION";
						 menuItem -label "SLSF1_VERTEX_ALPHA";
						 menuItem -label "SLSF1_GREYSCALE_TO_PALETTECOLOR";
						 menuItem -label "SLSF1_GREYSCALE_TO_PALETTEALPHA";
						 menuItem -label "SLSF1_USE_FALLOFF";
						 menuItem -label "SLSF1_ENVIRONMENT_MAPPING";
						 menuItem -label "SLSF1_RECIEVE_SHADOWS";
						 menuItem -label "SLSF1_CAST_SHADOWS";
						 menuItem -label "SLSF1_FACEGEN_DETAIL_MAP";
						 menuItem -label "SLSF1_PARALLAX";
						 menuItem -label "SLSF1_MODEL_SPACE_NORMALS";
						 menuItem -label "SLSF1_NON_PROJECTIVE_SHADOWS";
						 menuItem -label "SLSF1_LANDSCAPE";
						 menuItem -label "SLSF1_REFRACTION";
						 menuItem -label "SLSF1_FIRE_REFRACTION";
						 menuItem -label "SLSF1_EYE_ENVIRONMENT_MAPPING";
						 menuItem -label "SLSF1_HAIR_SOFT_LIGHTING";
						 menuItem -label "SLSF1_SCREENDOOR_ALPHA_FADE";
						 menuItem -label "SLSF1_LOCALMAP_HIDE_SECRET";
						 menuItem -label "SLSF1_FACEGEN_RGB_TINT";
						 menuItem -label "SLSF1_OWN_EMIT";
						 menuItem -label "SLSF1_PROJECTED_UV";
						 menuItem -label "SLSF1_MULTIPLE_TEXTURES";
						 menuItem -label "SLSF1_REMAPPABLE_TEXTURES";
						 menuItem -label "SLSF1_DECAL";
						 menuItem -label "SLSF1_DYNAMIC_DECAL";
						 menuItem -label "SLSF1_PARALLAX_OCCLUSION";
						 menuItem -label "SLSF1_EXTERNAL_EMITTANCE";
						 menuItem -label "SLSF1_SOFT_EFFECT";
						 menuItem -label "SLSF1_ZBUFFER_TEST";
						 
			  button -label "Add flag" -command "nifAddShaderFlag1" addShaderFlag1Bt;
			  button -label "Delete flag" -command "nifDeleteShaderFlag1" deleteShaderFlag1Bt;
			  button -label "Add default flags" -command "nifAddDefaultShaderFlag1" addDefaultShaderFlag1Bt;
}

global proc shaderFlags1Replace(string $attributeName) {
	global string $nifShaderFlags1Attr;

	$nifShaderFlags1Attr = $attributeName;
	textScrollList -edit -removeAll nifShaderFlags1TxLs;

	string $flags[] = `getAttr $attributeName`;
	for($i = 0; $i < size($flags); $i++) {
		textScrollList -edit -append $flags[$i] nifShaderFlags1TxLs;
	}

}

global proc nifShaderFlags2New(string $attributeName) {
	global string $nifShaderFlags2Attr;

	$nifShaderFlags2Attr = $attributeName;
	string $flags[] = `getAttr $attributeName`;

	textScrollList -height 50
	               -width 300
				   nifShaderFlags2TxLs;

	for($i = 0; $i < size($flags); $i++) {
		textScrollList -edit -append $flags[$i] nifShaderFlags2TxLs;
	}

	rowLayout -numberOfColumns 4
			  -columnWidth4 220 90 90 120
			  -columnAttach4 "both" "both" "both" "both";
			  optionMenu -label "Shader Flag:"
			             nifShaderFlags2OpMen;
						 menuItem -label "SLSF2_ZBUFFER_WRITE";
						 menuItem -label "SLSF2_LOD_LANDSCAPE";
						 menuItem -label "SLSF2_LOD_OBJECTS";
						 menuItem -label "SLSF2_NO_FADE";
						 menuItem -label "SLSF2_DOUBLE_SIDED";
						 menuItem -label "SLSF2_VERTEX_COLORS";
						 menuItem -label "SLSF2_GLOW_MAP";
						 menuItem -label "SLSF2_ASSUME_SHADOWMASK";
						 menuItem -label "SLSF2_PACKED_TANGENT";
						 menuItem -label "SLSF2_MULTI_INDEX_SNOW";
						 menuItem -label "SLSF2_VERTEX_LIGHTING";
						 menuItem -label "SLSF2_UNIFORM_SCALE";
						 menuItem -label "SLSF2_FIT_SLOPE";
						 menuItem -label "SLSF2_BILLBOARD";
						 menuItem -label "SLSF2_NO_LOD_LAND_BLEND";
						 menuItem -label "SLSF2_ENVMAP_LIGHT_FADE";
						 menuItem -label "SLSF2_WIREFRAME";
						 menuItem -label "SLSF2_WEAPON_BLOOD";
						 menuItem -label "SLSF2_HIDE_ON_LOCAL_MAP";
						 menuItem -label "SLSF2_PREMULT_ALPHA";
						 menuItem -label "SLSF2_CLOUD_LOD";
						 menuItem -label "SLSF2_ANISOTROPIC_LIGHTING";
						 menuItem -label "SLSF2_NO_TRANSPARENCY_MULTISAMPLING";
						 menuItem -label "SLSF2_UNUSED01";
						 menuItem -label "SLSF2_MULTI_LAYER_PARALLAX";
						 menuItem -label "SLSF2_SOFT_LIGHTING";
						 menuItem -label "SLSF2_RIM_LIGHTING";
						 menuItem -label "SLSF2_BACK_LIGHTING";
						 menuItem -label "SLSF2_UNUSED02";
						 menuItem -label "SLSF2_TREE_ANIM";
						 menuItem -label "SLSF2_EFFECT_LIGHTING";
						 menuItem -label "SLSF2_HD_LOD_OBJECTS";
			  button -label "Add flag" -command "nifAddShaderFlag2" addShaderFlag2Bt;
			  button -label "Delete flag" -command "nifDeleteShaderFlag2" deleteShaderFlag2Bt;
			  button -label "Add default flags" -command "nifAddDefaultShaderFlag2" addDefaultShaderFlag2Bt;
}

global proc nifShaderFlags2Replace(string $attributeName) {
	global string $nifShaderFlags2Attr;

	$nifShaderFlags2Attr = $attributeName;
	textScrollList -edit -removeAll nifShaderFlags2TxLs;

	string $flags[] = `getAttr $attributeName`;
	for($i = 0; $i < size($flags); $i++) {
		textScrollList -edit -append $flags[$i] nifShaderFlags2TxLs;
	}
}

global proc nifAddSpecificShaderFlag1(string $flag) {
	global string $nifShaderFlags1Attr;

	string $flags[] = `getAttr $nifShaderFlags1Attr`;

	for ($x = 0; $x < size($flags); $x++) {
		if ($flags[$x] == $flag) {
			return;
		}
	}

	textScrollList -edit -append $flag nifShaderFlags1TxLs;

	$flags[size($flags)] = $flag;
	int $size = size($flags);

	string $flags_command_string = "setAttr \"" + $nifShaderFlags1Attr + "\" -type \"stringArray\" " + $size;
	for($i = 0; $i < size($flags); $i++) {
		$flags_command_string = $flags_command_string + " \"" + $flags[$i] + "\"";
	}
	eval($flags_command_string);
}

global proc nifAddShaderFlag1() {
	string $flag = `optionMenu -query -value nifShaderFlags1OpMen`;
	nifAddSpecificShaderFlag1($flag);
}

global proc nifAddDefaultShaderFlag1() {
	nifAddSpecificShaderFlag1("SLSF1_SKINNED");
	nifAddSpecificShaderFlag1("SLSF1_RECIEVE_SHADOWS");
	nifAddSpecificShaderFlag1("SLSF1_SPECULAR");
	nifAddSpecificShaderFlag1("SLSF1_CAST_SHADOWS");
	nifAddSpecificShaderFlag1("SLSF1_OWN_EMIT");
	nifAddSpecificShaderFlag1("SLSF1_REMAPPABLE_TEXTURES");
	nifAddSpecificShaderFlag1("SLSF1_ZBUFFER_TEST");
}

global proc nifDeleteShaderFlag1() {
	global string $nifShaderFlags1Attr;

	int $indexes[] = `textScrollList -query -selectIndexedItem nifShaderFlags1TxLs`;

	if(size($indexes) != 0) {
		int $index = $indexes[0];
		textScrollList -edit -removeIndexedItem $index nifShaderFlags1TxLs;

		string $flags[] = `getAttr $nifShaderFlags1Attr`;
		string $new_flags[];

		$index = $index - 1;
		for($i = 0; $i < $index; $i++) {
			$new_flags[$i] = $flags[$i];
		}
		for($i = $index + 1; $i < size($flags); $i++) {
			$new_flags[$i - 1] = $flags[$i];
		}

		int $size = size($new_flags);
		string $flags_command_string = "setAttr \"" + $nifShaderFlags1Attr + "\" -type \"stringArray\" " + $size;
		for($i = 0; $i < size($new_flags); $i++) {
			$flags_command_string = $flags_command_string + " \"" + $new_flags[$i] + "\"";
		}
		eval($flags_command_string);
	}
}

global proc nifAddSpecificShaderFlag2(string $flag) {
	global string $nifShaderFlags2Attr;

	string $flags[] = `getAttr $nifShaderFlags2Attr`;

	for ($x = 0; $x < size($flags); $x++) {
		if ($flags[$x] == $flag) {
			return;
		}
	}

	$flags[size($flags)] = $flag;

	textScrollList -edit -append $flag nifShaderFlags2TxLs;

	int $size = size($flags);

	string $flags_command_string = "setAttr \"" + $nifShaderFlags2Attr + "\" -type \"stringArray\" " + $size;
	for($i = 0; $i < size($flags); $i++) {
		$flags_command_string = $flags_command_string + " \"" + $flags[$i] + "\"";
	}
	eval($flags_command_string);
}

global proc nifAddShaderFlag2() {
	string $flag = `optionMenu -query -value nifShaderFlags2OpMen`;
	
	nifAddSpecificShaderFlag2($flag);
}

global proc nifAddDefaultShaderFlag2() {
	nifAddSpecificShaderFlag2("SLSF2_ZBUFFER_WRITE");
	nifAddSpecificShaderFlag2("SLSF2_ENVMAP_LIGHT_FADE");
}

global proc nifDeleteShaderFlag2() {
	global string $nifShaderFlags2Attr;

	int $indexes[] = `textScrollList -query -selectIndexedItem nifShaderFlags2TxLs`;

	if (size($indexes) > 0) {
		int $index = $indexes[0];
		textScrollList -edit -removeIndexedItem $index nifShaderFlags2TxLs;

		string $flags[] = `getAttr $nifShaderFlags2Attr`;
		string $new_flags[];

		$index = $index - 1;
		for($i = 0; $i < $index; $i++) {
			$new_flags[$i] = $flags[$i];
		}
		for($i = $index + 1; $i < size($flags); $i++) {
			$new_flags[$i - 1] = $flags[$i];
		}

		int $size = size($new_flags);
		string $flags_command_string = "setAttr \"" + $nifShaderFlags2Attr + "\" -type \"stringArray\" " + $size;
		for($i = 0; $i < size($new_flags); $i++) {
			$flags_command_string = $flags_command_string + " \"" + $new_flags[$i] + "\"";
		}
		eval($flags_command_string);
	}
	
}



