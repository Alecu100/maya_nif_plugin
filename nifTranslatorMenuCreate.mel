global string $nifToolsMenu;
global string $nifToolsStackHeapArray[];

global proc nifTranslatorMenuCreate() {
	global string $nifToolsMenu;
	global string $gMainWindow;
    setParent $gMainWindow;

    $nifToolsMenu = `menu -label "NifTools" -allowOptionBoxes false -tearOff true`;

		menuItem -label "Animation" -subMenu true animationMenu;

			menuItem -label "Rotation type" -subMenu true;
				menuItem -label "Set rotation type to XYZ" -command "nifTranslatorSetXYZRotation";
				menuItem -label "Set rotation type to quaternion" -command "nifTranslatorSetQuaternionRotation";
			setParent -menu animationMenu;

			menuItem -label "Exporting indexes" -subMenu true;
				menuItem -label "Set default export index" -command "nifTranslatorSetDefaultExportIndex";
				menuItem -label "Set export indexes to DFS" -command "nifTranslatorSetExportIndexesToDFS";
				menuItem -label "Set export indexes to BFS" -command "nifTranslatorSetExportIndexesToBFS";
			setParent -menu animationMenu;

			menuItem -label "Interpolator type" -subMenu true;
				menuItem -label "Set to NiTransformInterpolator" -command "nifTranslatorSetInterpolatorToNiTransformInterpolator";
				menuItem -label "Set to NiBSplineTransformInterpolator" -command "nifTranslatorSetInterpolatorToNiBSplineInterpolator";
				menuItem -label "Set to NiBSplineCompTransformInterpolator" -command "nifTranslatorSetInterpolatorToNiBSplineCompInterpolator";
				menuItem -label "Set to NiPoint3Interpolator" -command "nifTranslatorSetInterpolatorToNiPoint3Interpolator";
				menuItem -label "Set to NiFloatInterpolator" -command "nifTranslatorSetInterpolatorToNiFloatInterpolator";
				menuItem -label "Set to NiBoolInterpolator" -command "nifTranslatorSetInterpolatorToNiBoolInterpolator";
			setParent -menu animationMenu;

			menuItem -label "Rest transformation" -subMenu true;
				menuItem -label "Set rest translate" -command "nifTranslatorSetTranslateRest2";
				menuItem -label "Set rest scale" -command "nifTranslatorSetScaleRest2";
				menuItem -label "Set rest rotate" -command "nifTranslatorSetRotateRest2";
			setParent -menu animationMenu;

			menuItem -label "Others" -subMenu true;
				menuItem -label "Set animation priority" -command "nifTranslatorSetAnimationPriority";
				menuItem -label "Prepare skeleton for animation" -command "nifTranslatorPrepareSkeletonForAnimation";
			setParent -menu animationMenu;

		setParent -menu $nifToolsMenu;

		menuItem -label "Rigging" -subMenu true riggingMenu;
			menuItem -label "NifDismemberPartition" -subMenu true nifDismemberPartitionMenu;
				menuItem -label "Create nifDismemberPartition Node" -command "nifTranslatorCreateNifDismemberPartition";
				menuItem -label "Connect nifDismemberPartition Node" -command "nifTranslatorConnectNifDismemberPartition";
				menuItem -label "Create and Connect nifDismemberPartition Node" -command "nifTranslatorCreateConnecNifDismemberPartition";
			setParent -menu riggingMenu;
		setParent -menu $nifToolsMenu;

		menuItem -label "Materials" -subMenu true materialsMenu;
			menuItem -label "Skyrim shader flags1" -subMenu true skyrimShaderFlags1Menu;

				menuItem -label "Shader flags 1-8" -subMenu true skyrimShaderFlags118Menu;
					menuItem -label "SLSF1_Specular" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Specular\", 1)";
					menuItem -label "SLSF1_Skinned" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Skinned\", 1)";
					menuItem -label "SLSF1_Temp_Refraction" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Temp_Refraction\", 1)";
					menuItem -label "SLSF1_Vertex_Alpha" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Vertex_Alpha\", 1)";
					menuItem -label "SLSF1_Greyscale_To_PaletteColor" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Greyscale_To_PaletteColor\", 1)";
					menuItem -label "SLSF1_Greyscale_To_PaletteAlpha" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Greyscale_To_PaletteAlpha\", 1)";
					menuItem -label "SLSF1_Use_Falloff" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Use_Falloff\", 1)";
					menuItem -label "SLSF1_Environment_Mapping" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Environment_Mapping\", 1)";
				setParent -menu skyrimShaderFlags1Menu;

				menuItem -label "Shader flags 9-16" -subMenu true skyrimShaderFlags1816Menu;
					menuItem -label "SLSF1_Recieve_Shadows" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Recieve_Shadows\", 1)";
					menuItem -label "SLSF1_Cast_Shadows" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Cast_Shadows\", 1)";
					menuItem -label "SLSF1_Facegen_Detail_Map" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Facegen_Detail_Map\", 1)";
					menuItem -label "SLSF1_Parallax" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Parallax\", 1)";
					menuItem -label "SLSF1_Model_Space_Normals" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Model_Space_Normals\", 1)";
					menuItem -label "SLSF1_Non-Projective_Shadows" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Non-Projective_Shadows\", 1)";
					menuItem -label "SLSF1_Landscape" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Landscape\", 1)";
					menuItem -label "SLSF1_Refraction" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Refraction\", 1)";
				setParent -menu skyrimShaderFlags1Menu;

				menuItem -label "Shader flags 17-24" -subMenu true skyrimShaderFlags11624Menu;
					menuItem -label "SLSF1_Fire_Refraction" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Fire_Refraction\", 1)";
					menuItem -label "SLSF1_Eye_Environment_Mapping" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Eye_Environment_Mapping\", 1)";
					menuItem -label "SLSF1_Hair_Soft_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Hair_Soft_Lighting\", 1)";
					menuItem -label "SLSF1_Screendoor_Alpha_Fade" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Screendoor_Alpha_Fade\", 1)";
					menuItem -label "SLSF1_Localmap_Hide_Secret" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Localmap_Hide_Secret\", 1)";
					menuItem -label "SLSF1_FaceGen_RGB_Tint" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_FaceGen_RGB_Tint\", 1)";
					menuItem -label "SLSF1_Own_Emit" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Own_Emit\", 1)";
					menuItem -label "SLSF1_Projected_UV" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Projected_UV\", 1)";
				setParent -menu skyrimShaderFlags1Menu;

				menuItem -label "Shader flags 25-32" -subMenu true skyrimShaderFlags12432Menu;
					menuItem -label "SLSF1_Multiple_Textures" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Multiple_Textures\", 1)";
					menuItem -label "SLSF1_Remappable_Textures" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Remappable_Textures\", 1)";
					menuItem -label "SLSF1_Decal" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Decal\", 1)";
					menuItem -label "SLSF1_Dynamic_Decal" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Dynamic_Decal\", 1)";
					menuItem -label "SLSF1_Parallax_Occlusion" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Parallax_Occlusion\", 1)";
					menuItem -label "SLSF1_External_Emittance" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_External_Emittance\", 1)";
					menuItem -label "SLSF1_Soft_Effect" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_Soft_Effect\", 1)";
					menuItem -label "SLSF1_ZBuffer_Test" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF1_ZBuffer_Test\", 1)";
				setParent -menu skyrimShaderFlags1Menu;

			setParent -menu materialsMenu;

			menuItem -label "Skyrim shader flags2" -subMenu true skyrimShaderFlags2Menu;

				menuItem -label "Shader flags 1-8" -subMenu true skyrimShaderFlags218Menu;
					menuItem -label "SLSF2_ZBuffer_Write" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_ZBuffer_Write\", 2)";
					menuItem -label "SLSF2_LOD_Landscape" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_LOD_Landscape\", 2)";
					menuItem -label "SLSF2_LOD_Objects" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_LOD_Objects\", 2)";
					menuItem -label "SLSF2_No_Fade" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_No_Fade\", 2)";
					menuItem -label "SLSF2_Double_Sided" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Double_Sided\", 2)";
					menuItem -label "SLSF2_Vertex_Colors" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Vertex_Colors\", 2)";
					menuItem -label "SLSF2_Glow_Map" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Glow_Map\", 2)";
					menuItem -label "SLSF2_Assume_Shadowmask" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Assume_Shadowmask\", 2)";
				setParent -menu skyrimShaderFlags2Menu;

				menuItem -label "Shader flags 9-16" -subMenu true skyrimShaderFlags2816Menu;
					menuItem -label "SLSF2_Packed_Tangent" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Packed_Tangent\", 2)";
					menuItem -label "SLSF2_Multi_Index_Snow" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Multi_Index_Snow\", 2)";
					menuItem -label "SLSF2_Vertex_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Vertex_Lighting\", 2)";
					menuItem -label "SLSF2_Uniform_Scale" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Uniform_Scale\", 2)";
					menuItem -label "SLSF2_Fit_Slope" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Fit_Slope\", 2)";
					menuItem -label "SLSF2_Billboard" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Billboard\", 2)";
					menuItem -label "SLSF2_No_LOD_Land_Blend" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_No_LOD_Land_Blend\", 2)";
					menuItem -label "SLSF2_EnvMap_Light_Fade" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_EnvMap_Light_Fade\", 2)";
				setParent -menu skyrimShaderFlags2Menu;

				menuItem -label "Shader flags 17-24" -subMenu true skyrimShaderFlags21624Menu;
					menuItem -label "SLSF2_Wireframe" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Wireframe\", 2)";
					menuItem -label "SLSF2_Weapon_Blood" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Weapon_Blood\", 2)";
					menuItem -label "SLSF2_Hide_On_Local_Map" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Hide_On_Local_Map\", 2)";
					menuItem -label "SLSF2_Premult_Alpha" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Premult_Alpha\", 2)";
					menuItem -label "SLSF2_Cloud_LOD" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Cloud_LOD\", 2)";
					menuItem -label "SLSF2_Anisotropic_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Anisotropic_Lighting\", 2)";
					menuItem -label "SLSF2_No_Transparency_Multisampling" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_No_Transparency_Multisampling\", 2)";
					menuItem -label "SLSF2_Unused01" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Unused01\", 2)";
				setParent -menu skyrimShaderFlags2Menu;

				menuItem -label "Shader flags 25-32" -subMenu true skyrimShaderFlags22432Menu;
					menuItem -label "SLSF2_Multi_Layer_Parallax" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Multi_Layer_Parallax\", 2)";
					menuItem -label "SLSF2_Soft_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Soft_Lighting\", 2)";
					menuItem -label "SLSF2_Rim_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Rim_Lighting\", 2)";
					menuItem -label "SLSF2_Back_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Back_Lighting\", 2)";
					menuItem -label "SLSF2_Unused02" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Unused02\", 2)";
					menuItem -label "SLSF2_Tree_Anim" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Tree_Anim\", 2)";
					menuItem -label "SLSF2_Effect_Lighting" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_Effect_Lighting\", 2)";
					menuItem -label "SLSF2_HD_LOD_Objects" -command "nifTranslatorAddSkyrimShaderFlags(\"SLSF2_HD_LOD_Objects\", 2)";
				setParent -menu skyrimShaderFlags2Menu;

		setParent -menu $nifToolsMenu;

		menuItem -label "Texture" -subMenu true textureMenu;
			menuItem -label "Set texturing mode to Apply Modular";
			menuItem -label "Set texturing mode to Apply Highlight";
			menuItem -label "Set texturing mode to Apply Highlight2";
		setParent -menu $nifToolsMenu;

	setParent $gMainWindow;
}

global proc nifTranslatorSetTranslateRest2() {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0; $i < size($selection); $i++) {
		nifTranslatorSetTranslateRest($selection[$i]);
	}
}

global proc nifTranslatorSetScaleRest2() {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0; $i < size($selection); $i++) {
		nifTranslatorSetScaleRest($selection[$i]);
	}
}

global proc nifTranslatorSetRotateRest2() {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0; $i < size($selection); $i++) {
		nifTranslatorSetRotateRest($selection[$i]);
	}
}

global proc nifTranslatorPrepareSkeletonForAnimation() {
	int $index = 0;
	string $parent[];
	string $selection[] = `ls -selection -type "joint"`;

	if(size($selection) < 1 || size($selection) > 1) {
		error "Must select one joint from the skeleton first";
		return;
	}

	while(size($selection) > 0) {
		$parent = $selection;
		$selection = `listRelatives -parent $parent[0]`;
	}

	nifToolsStackClear();
	nifToolsStackPush($parent[0]);

	while(nifToolsStackSize() > 0) {
		string $current = nifToolsStackPop();
		string $attributes[] = eval("listAttr -shortNames " + $current);

		int $hasRotationType = 0;
		int $hasInterpolatorType = 0;
		int $hasAnimationPriority = 0;

		for($i = 0; $i < size($attributes); $i++) {
			if($attributes[$i] == "rotationType") {
				$hasRotationType = 1;
				continue;
			}
			if($attributes[$i] == "interpolatorType") {
				$hasInterpolatorType = 1;
				continue;
			}
			if($attributes[$i] == "animationPriority") {
				$hasAnimationPriority = 1;
				continue;
			}
		}

		nifTranslatorSetTranslateRest($current);
		nifTranslatorSetScaleRest($current);
		nifTranslatorSetRotateRest($current);

		if($hasInterpolatorType == 0) { 
			eval("addAttr -dataType \"string\" -shortName \"interpolatorType\" " + $current);	
		}
		eval("setAttr -type \"string\" " + $current + "\.interpolatorType" + " \"NiTransformInterpolator\" ");

		if($hasRotationType == 0) {
			eval("addAttr -dataType \"string\" -shortName \"rotationType\" " + $current);	
		}
		eval("setAttr -type \"string\" " + $current + "\.rotationType" + " " + " \"XYZ\" ");

		if($hasAnimationPriority == 0) { 
			eval("addAttr -at byte -shortName \"animationPriority\" " + $current);
		}
		eval("setAttr " + $current + "\.animationPriority" + " " + 30);

		nifTranslatorSetExportIndex($current, $index);

		string $children[] = `listRelatives -children -type "joint" $current`;
		$index++;

		for($i = 0; $i < size($children); $i++) {
			nifToolsStackPush($children[$i]);
		}
	}
}

global proc nifTranslatorSetTranslateRest(string $item) {
	string $attributes[] = `listAttr -shortNames $item`;

	int $hasAttr = 0;

	float $restX = eval("getAttr " + $item + "\.translateX");
	float $restY = eval("getAttr " + $item + "\.translateY");
	float $restZ = eval("getAttr " + $item + "\.translateZ");

	for($i = 0; $i < size($attributes); $i++) {
		if($attributes[$i] == "translateRest") {
			$hasAttr = 1;
			break;
		}
	}

	if($hasAttr == 0) {
		eval("addAttr -shortName \"translateRest\" -attributeType double3 " + $item);
		eval("addAttr -shortName \"translateRestX\" -attributeType double -parent \"translateRest\" " + $item);
		eval("addAttr -shortName \"translateRestY\" -attributeType double -parent \"translateRest\" " + $item);
		eval("addAttr -shortName \"translateRestZ\" -attributeType double -parent \"translateRest\" " + $item);
	}

	eval("setAttr " + $item + "\.translateRestX " + $restX);
	eval("setAttr " + $item + "\.translateRestY " + $restY);
	eval("setAttr " + $item + "\.translateRestZ " + $restZ);
}

global proc nifTranslatorSetScaleRest(string $item) {
	string $attributes[] = `listAttr -shortNames $item`;

	int $hasAttr = 0;

	float $restX = eval("getAttr " + $item + "\.scaleX");
	float $restY = eval("getAttr " + $item + "\.scaleY");
	float $restZ = eval("getAttr " + $item + "\.scaleZ");

	for($i = 0; $i < size($attributes); $i++) {
		if($attributes[$i] == "scaleRest") {
			$hasAttr = 1;
			break;
		}
	}

	if($hasAttr == 0) {
		eval("addAttr -shortName \"scaleRest\" -attributeType double3 " + $item);
		eval("addAttr -shortName \"scaleRestX\" -attributeType double -parent \"scaleRest\" " + $item);
		eval("addAttr -shortName \"scaleRestY\" -attributeType double -parent \"scaleRest\" " + $item);
		eval("addAttr -shortName \"scaleRestZ\" -attributeType double -parent \"scaleRest\" " + $item);
	}

	eval("setAttr " + $item + "\.scaleRestX " + $restX);
	eval("setAttr " + $item + "\.scaleRestY " + $restY);
	eval("setAttr " + $item + "\.scaleRestZ " + $restZ);
}

global proc nifTranslatorSetRotateRest(string $item) {
	string $attributes[] = `listAttr -shortNames $item`;

	int $hasAttr = 0;

	float $restX = eval("getAttr " + $item + "\.rotateX");
	float $restY = eval("getAttr " + $item + "\.rotateY");
	float $restZ = eval("getAttr " + $item + "\.rotateZ");

	for($i = 0; $i < size($attributes); $i++) {
		if($attributes[$i] == "rotateRest") {
			$hasAttr = 1;
			break;
		}
	}

	if($hasAttr == 0) {
		eval("addAttr -shortName \"rotateRest\" -attributeType double3 " + $item);
		eval("addAttr -shortName \"rotateRestX\" -attributeType double -parent \"rotateRest\" " + $item);
		eval("addAttr -shortName \"rotateRestY\" -attributeType double -parent \"rotateRest\" " + $item);
		eval("addAttr -shortName \"rotateRestZ\" -attributeType double -parent \"rotateRest\" " + $item);
	}

	eval("setAttr " + $item + "\.rotateRestX " + $restX);
	eval("setAttr " + $item + "\.rotateRestY " + $restY);
	eval("setAttr " + $item + "\.rotateRestZ " + $restZ);
}

global proc nifTranslatorSetXYZRotation() {
	nifTranslatorSetRotationType("XYZ");
}

global proc nifTranslatorSetQuaternionRotation() {
	nifTranslatorSetRotationType("quaternion");
}

global proc nifTranslatorSetRotationType(string $type) {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0;$i < size($selection); $i++) {
		int $hasAttr = 0;
		string $attributes[] = `listAttr -shortNames $selection[$i]`;

		for($j = 0;$j < size($attributes); $j++) {
			if($attributes[$j] == "rotationType") {
				$hasAttr = 1;
				break; 
			}
		}

		if($hasAttr == 0) { 
			eval("addAttr -dataType \"string\" -shortName \"rotationType\" " + $selection[$i]);	
		}
		eval("setAttr -type \"string\" " + $selection[$i] + "\.rotationType" + " " + $type);
	}

	if(size($selection) == 0) {
		error "Must select at least one joint or shape";
	}
}

global proc nifTranslatorSetInterpolatorToNiTransformInterpolator() {
	nifTranslatorSetInterpolator("NiTransformInterpolator");
}

global proc nifTranslatorSetInterpolatorToNiBSplineCompInterpolator() {
	nifTranslatorSetInterpolator("NiBSplineCompTransformInterpolator");
}

global proc nifTranslatorSetInterpolatorToNiPoint3Interpolator() {
	nifTranslatorSetInterpolator("NiPoint3Interpolator");
}

global proc nifTranslatorSetInterpolatorToNiBSplineInterpolator() {
	nifTranslatorSetInterpolator("NiBSplineTransformInterpolator");
}

global proc nifTranslatorSetInterpolatorToNiFloatInterpolator() {
	nifTranslatorSetInterpolator("NiFloatInterpolator");
}

global proc nifTranslatorSetInterpolatorToNiBoolInterpolator() {
	nifTranslatorSetInterpolator("NiBoolInterpolator");
}

global proc nifTranslatorSetInterpolator(string $type) {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0;$i < size($selection); $i++) {
		int $hasAttr = 0;
		string $attributes[] = `listAttr -shortNames $selection[$i]`;

		for($j = 0;$j < size($attributes); $j++) {
			if($attributes[$j] == "interpolatorType") {
				$hasAttr = 1;
				break; 
			}
		}

		if($hasAttr == 0) { 
			eval("addAttr -dataType \"string\" -shortName \"interpolatorType\" " + $selection[$i]);	
		}
		eval("setAttr -type \"string\" " + $selection[$i] + "\.interpolatorType" + " " + $type);
	}

	if(size($selection) == 0) {
		error "Must select at least one joint or shape";
	}
}

global proc nifTranslatorSetAnimationPriority() {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0;$i < size($selection); $i++) {
		int $hasAttr = 0;
		string $attributes[] = `listAttr -shortNames $selection[$i]`;

		for($j = 0;$j < size($attributes); $j++) {
			if($attributes[$j] == "animationPriority") {
				$hasAttr = 1;
				break; 
			}
		}

		if($hasAttr == 0) { 
			eval("addAttr -at byte -shortName \"animationPriority\" " + $selection[$i]);
		}
		eval("setAttr " + $selection[$i] + "\.animationPriority" + " " + 30);
	}

	if(size($selection) == 0) {
		error "Must select at least one joint or shape";
	}
}

global proc nifTranslatorSetDefaultExportIndex() {
	string $selection[] = `ls -selection -type "joint" -type "shape"`;

	for($i = 0;$i < size($selection); $i++) {
		nifTranslatorSetExportIndex($selection[$i], 0);
	}

	if(size($selection) == 0) {
		error "Must select at least one joint or shape";
	}
}

global proc nifTranslatorSetExportIndex(string $object, int $value) {
	int $hasAttr = 0;
	string $attributes[] = `listAttr -shortNames $object`;

	for($j = 0;$j < size($attributes); $j++) {
		if($attributes[$j] == "exportIndex") {
			$hasAttr = 1;
			break; 
		}
	}

	if($hasAttr == 0) { 
		eval("addAttr -at long -shortName \"exportIndex\" " + $object);
	}
	eval("setAttr " + $object + "\.exportIndex" + " " + $value);
}

global proc nifTranslatorSetExportIndexesToDFS() {
	int $index = 0;
	string $parent[];
	string $selection[] = `ls -selection -type "joint"`;

	if(size($selection) < 1 || size($selection) > 1) {
		error "Must select one joint from the skeleton first";
		return;
	}

	while(size($selection) > 0) {
		$parent = $selection;
		$selection = `listRelatives -parent $parent[0]`;
	}

	nifToolsStackClear();
	nifToolsStackPush($parent[0]);

	while(nifToolsStackSize() > 0) {
		string $current = nifToolsStackPop();
		nifTranslatorSetExportIndex($current, $index);
		string $children[] = `listRelatives -children -type "joint" $current`;
		$index++;

		for($i = 0; $i < size($children); $i++) {
			nifToolsStackPush($children[$i]);
		}
	}
}

global proc nifTranslatorSetExportIndexesToBFS() {
	int $index = 0;
	string $parent[];
	string $selection[] = `ls -selection -type "joint"`;

	if(size($selection) < 1 || size($selection) > 1) {
		error "Must select one joint from the skeleton first";
		return;
	}

	while(size($selection) > 0) {
		$parent = $selection;
		$selection = `listRelatives -parent $parent[0]`;
	}

	nifToolsQueueClear();
	nifToolsQueueEnqueue($parent[0]);

	while(nifToolsQueueSize() > 0) {
		string $current = nifToolsQueueDequeue();
		nifTranslatorSetExportIndex($current, $index);
		string $children[] = `listRelatives -children -type "joint" $current`;
		$index++;

		for($i = 0; $i < size($children); $i++) {
			nifToolsQueueEnqueue($children[$i]);
		}
	}
}

global proc string nifToolsStackPop() {
	global string $nifToolsStackHeapArray[];

	if(size($nifToolsStackHeapArray) == 0) {
		return "";
	}

	string $ret = $nifToolsStackHeapArray[size($nifToolsStackHeapArray) - 1];

	string $newArray[];

	for($i = 0; $i < size($nifToolsStackHeapArray) - 1; $i++) {
		$newArray[$i] = $nifToolsStackHeapArray[$i];
	}

	$nifToolsStackHeapArray = $newArray;

	return $ret;
}

global proc nifToolsStackPush(string $item) {
	global string $nifToolsStackHeapArray[];

	$nifToolsStackHeapArray[size($nifToolsStackHeapArray)] = $item;
}

global proc nifToolsStackClear() {
	global string $nifToolsStackHeapArray[];

	clear($nifToolsStackHeapArray);
}

global proc int nifToolsStackSize() {
	global string $nifToolsStackHeapArray[];

	return size($nifToolsStackHeapArray);
}

global proc nifToolsQueueEnqueue(string $item) {
	global string $nifToolsStackHeapArray[];

	$nifToolsStackHeapArray[size($nifToolsStackHeapArray)] = $item;
}

global proc string nifToolsQueueDequeue() {
	global string $nifToolsStackHeapArray[];

	if(size($nifToolsStackHeapArray) == 0) {
		return "";
	}

	string $ret = $nifToolsStackHeapArray[0];

	string $newArray[];

	for($i = 1; $i < size($nifToolsStackHeapArray); $i++) {
		$newArray[$i - 1] = $nifToolsStackHeapArray[$i];
	}

	$nifToolsStackHeapArray = $newArray;

	return $ret;
}

global proc int nifToolsQueueSize() {
	global string $nifToolsStackHeapArray[];

	return size($nifToolsStackHeapArray);
}

global proc nifToolsQueueClear() {
	global string $nifToolsStackHeapArray[];

	clear($nifToolsStackHeapArray);
}

global proc nifTranslatorCreateNifDismemberPartition() {
	eval ("createNode \"nifDismemberPartition\"");
}

global proc nifTranslatorConnectNifDismemberPartition() {
	string $nifDismemberNode[] = `ls -type "nifDismemberPartition" -selection`;
	string $blindDataNode[] = `ls -type "polyBlindData" -selection`;
	string $shapeNode[] = `ls -type "shape" -selection`;

	if(size($nifDismemberNode) != 1) {
		error "Please select exactly one nifDismemberPartition node to connect it to a shape node and a polyBlindDataNode";
		return;
	}
	if(size($blindDataNode) != 1) {
		error "Please select exactly one polyBlindData node to connect it to a nifDismemberPartitionNode";
		return;
	}
	if(size($shapeNode) != 1) {
		error "Please select exactly one shape node to connect it to a nifDismemberPartitionNode";
		return;
	}

	eval("connectAttr -force " + $blindDataNode[0] + "\.message " + $nifDismemberNode[0] + "\.targetFaces");
	eval("connectAttr -force " + $shapeNode[0] + "\.message " + $nifDismemberNode[0] + "\.targetShape");
}

global proc nifTranslatorCreateConnecNifDismemberPartition() {
	string $blindDataNode[] = `ls -type "polyBlindData" -selection`;
	string $shapeNode[] = `ls -type "shape" -selection`;
	string $nifDismemberNode;

	if(size($blindDataNode) != 1) {
		error "Please select exactly one polyBlindData node to connect it to a nifDismemberPartitionNode";
		return;
	}
	if(size($shapeNode) != 1) {
		error "Please select exactly one shape node to connect it to a nifDismemberPartitionNode";
		return;
	}

	$nifDismemberNode = `createNode "nifDismemberPartition"`;

	eval("connectAttr -force " + $blindDataNode[0] + "\.message " + $nifDismemberNode + "\.targetFaces");
	eval("connectAttr -force " + $shapeNode[0] + "\.message " + $nifDismemberNode + "\.targetShape");
}

global proc nifTranslatorAddSkyrimShaderFlags(string $flag, int $type) {
	string $selection[] = `ls -selection`;

	for($i = 0; $i < size($selection); $i++) {
		string $current = $selection[$i];
		if(`objectType -isAType "material" $current` == false) {
			string $relatives[] = `listRelatives -shapes $current`;
			if(size($relatives) > 0) {
				string $shape = $relatives[0];
				string $shading_engine[] = `listConnections -destination true -source false -plugs false -type "shadingEngine" $shape`;
				if(size($shading_engine) > 0) {
					if(size($shading_engine) > 0) {
						string $shader[] = `listConnections -destination false -source true -plugs false -type "lambert" $shading_engine[0]`;
						if(size($shader) > 0) {
							$current = $shader[0];
						} else {
							break;
						}
					} else {
						break;
					}
				} else {
					break;
				}
			} else {
				break;
			}
		}
		string $attributes[] = eval("listAttr -shortNames "+ $current);
		int $has_attr = 0;
		for($j = 0; $j < size($attributes); $j++) {
			if($attributes[$j] == ("skyrimShaderFlags" + $type)) {
				$has_attr = 1;
				break;
			}
		}
		if($has_attr == 0) {
			eval("addAttr -dataType \"string\" -shortName skyrimShaderFlags" + $type + " " + $current);
		}
		string $flags_string = eval("getAttr " + $current + "\.skyrimShaderFlags" + $type);
		if(size($flags_string) <= 1) {
			$flags_string = $flag;
		} else {
			$flags_string = $flags_string + "|" + $flag;
		}
		eval("setAttr -type \"string\" " + $current + "\.skyrimShaderFlags" + $type + "\"" + $flags_string + "\"");
	}
}